targetScope = 'resourceGroup'

// ------------------
//    PARAMETERS
// ------------------

@description('The location where the resources will be created.')
param location string = resourceGroup().location

@description('Optional. The prefix to be used for all resources created by this template.')
param prefix string = ''

@description('Optional. The suffix to be used for all resources created by this template.')
param suffix string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {
  environment: 'dev' 
  project: 'tasksmanager'}

// Container Apps Env / Log Analytics Workspace / Application Insights
@description('Optional. The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = '${prefix}cae-${uniqueString(resourceGroup().id)}${suffix}'

@description('Optional. The name of the log analytics workspace. If set, it overrides the name generated by the template.')
param logAnalyticsWorkspaceName string = '${prefix}log-${uniqueString(resourceGroup().id)}${suffix}'

@description('Optional. The name of the application insights. If set, it overrides the name generated by the template.')
param applicationInsightName string = '${prefix}appi-${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of the service for the backend api service. The name is use as Dapr App ID.')
param backendApiServiceName string = 'backend-api-${uniqueString(resourceGroup().id)}${suffix}'

@description('The name of the service for the frontend web app service. The name is use as Dapr App ID.')
param frontendWebAppServiceName string = 'frontend-webapp-${uniqueString(resourceGroup().id)}${suffix}'

// Container Registry & Images
@description('The name of the container registry.')
param containerRegistryName string = 'acr-${uniqueString(resourceGroup().id)}${suffix}'

@description('The image for the backend api service.')
param backendApiServiceImage string = 'ghcr.io/robertoborges/tasksmanager-backend-api:sha-f736c52'

@description('The image for the frontend web app service.')
param frontendWebAppServiceImage string = 'ghcr.io/robertoborges/tasksmanager-frontend-webapp:sha-ac70171'

// App Ports
@description('The target and dapr port for the frontend web app service.')
param frontendWebAppPortNumber int = 80

@description('The target and dapr port for the backend api service.')
param backendApiPortNumber int = 80

// ------------------
// RESOURCES
// ------------------

module containerRegistry 'modules/container-registry.bicep' = {
  name: 'containerRegistry-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    tags: tags
    containerRegistryName: containerRegistryName
  }
}

module containerAppsEnvironment 'modules/container-apps-environment.bicep' = {
  name: 'containerAppsEnv-${uniqueString(resourceGroup().id)}'
  params: {
    containerAppsEnvironmentName: containerAppsEnvironmentName
    logAnalyticsWorkspaceName: logAnalyticsWorkspaceName
    applicationInsightName: applicationInsightName
    location: location
    tags: tags
  }
  dependsOn: [
    containerRegistry
  ]
}

module containerApps 'modules/container-apps.bicep' = {
  name: 'containerApps-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    tags: tags
    backendApiServiceName: backendApiServiceName
    frontendWebAppServiceName: frontendWebAppServiceName
    containerAppsEnvironmentName: containerAppsEnvironmentName
    containerRegistryName: containerRegistryName
    backendApiServiceImage: backendApiServiceImage
    frontendWebAppServiceImage: frontendWebAppServiceImage
    applicationInsightsName: containerAppsEnvironment.outputs.applicationInsightsName
    frontendWebAppPortNumber: frontendWebAppPortNumber
    backendApiPortNumber: backendApiPortNumber
  }
}

module aci 'modules/container-instance.bicep' = {
  name: 'aci-backend-${uniqueString(resourceGroup().id)}'
  params: {
    aciName: 'aci-backend-${uniqueString(resourceGroup().id)}'
    location: location
    tags: tags
    backendApiServiceImage: backendApiServiceImage
    containerRegistryUserAssignedIdentityId: containerApps.outputs.containerRegistryUserAssignedIdentityId
    containerRegistryName: containerRegistryName
    }
  dependsOn: [
    containerApps
  ]
}

module webapp 'modules/web-apps.bicep' = {
  name: 'frontend-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    tags: tags
    frontendWebAppServiceName: frontendWebAppServiceName
    frontendWebAppServiceImage: frontendWebAppServiceImage
    containerRegistryUserAssignedIdentityId: containerApps.outputs.containerRegistryUserAssignedIdentityId
    backendACIFQDN: aci.outputs.backendACIFQDN
    sku: 'S1'
  }
  dependsOn: [
    containerApps
  ]
}

module kubernetes 'modules/kubernetes-services.bicep' = {
  name: 'kubernetes-${uniqueString(resourceGroup().id)}'
  params: {
    location: location
    tags: tags
    dnsPrefix: 'k8s-${uniqueString(resourceGroup().id)}'
    osType: 'Linux'
    agentCount: 1
    aksClusterName: 'aks-${uniqueString(resourceGroup().id)}'
    containerRegistryUserAssignedIdentityId: containerApps.outputs.containerRegistryUserAssignedIdentityId
  }
  dependsOn: [
    containerApps
  ]
}

// ------------------
// OUTPUTS
// ------------------

@description('The name of the container app for the backend api service.')
output backendApiServiceContainerAppName string = containerApps.outputs.backendApiServiceContainerAppName

@description('The name of the container app for the front end web app service.')
output frontendWebAppServiceContainerAppName string = containerApps.outputs.frontendWebAppServiceContainerAppName

@description('The FQDN of the front end web app.')
output frontendWebAppServiceFQDN string = containerApps.outputs.frontendWebAppServiceFQDN

@description('The FQDN of the backend web app')
output backendApiServiceFQDN string = containerApps.outputs.backendApiServiceFQDN
